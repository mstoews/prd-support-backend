generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

model User {
  userid    String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime
  email     String
  password  String
  firstname String?
  lastname  String?
  role      Role
}

model class_assoc {
  party_ref              String
  class_assoc_code       String
  assoc_code_description String
  main_class             Int
  main_code              String
  sub_class              Int
  sub_code               String
  description            String
  user_def               String
  applied                Boolean
  version_date           DateTime?
  version_no             Int
  version_user           String

  @@id([party_ref, class_assoc_code, main_class, main_code, sub_class, sub_code])
}

model class_assoc_stepper {
  party_ref              String
  class_assoc_code       String
  code_type              String
  class_1                Int
  code_1                 String
  class_2                Int
  code_2                 String[]
  applied                Boolean
  version_date           DateTime?
  version_no             Int
  version_user           String

  @@id([party_ref, class_assoc_code, class_1, code_1, class_2])
}

model party_data_pushed {
  party_ref                 String
  environment                   String
  party_template_data       String?
  party_class_assoc_data    String?
  version_date              DateTime?
  version_user              String

  @@id([party_ref,environment])
}

model environment {
  environment String  @id
  description String?
  sst_nestjsserver_url String?
  sst_pythonserver_url String?
  sst_springserver_url String?
  active      String?
}

model gloss_codes {
  class_value     Int
  code_value      String
  code_short_desc String?
  code_long_desc  String?
  active_ind      String?

  @@id([class_value, code_value])
}

model instr {
  instr_ref        String    @id
  instr_type       String?
  template_ref     String?
  instr_short_name String?
  instr_long_name  String?
  active_ind       String?
  issu_date        DateTime?
  issu_price       Float?
  matu_date        DateTime?
  matu_price       Float?
  denom_ccy        String?
  price_dec        Float?
  price_div        Float?
  price_mul        Float?
  price_type       String?
  tick_value       Float?
  book_ref         String?
  market_ref       String?
  lot_size         Int?
  qty_dec_places   Int?
  version_date     DateTime?
  version_no       Int?
  version_user     String?
}

model instr_accrual {
  instr_ref       String
  seq_no          Int
  accr_basis      String?
  amort_flag      String?
  capi_flag       String?
  paym_ccy        String?
  start_accr_date DateTime?
  first_paym_date DateTime?
  last_paym_date  DateTime?
  frn_flag        String?
  neg_flag        String?
  freq_rule       String?
  freq_unit       Int?
  cal_code        String?
  date_rule       String?
  eom_flag        String?
  cpon_rate       Float?
  rnd_rule        String?
  rdat_offset     Int?
  user_def        String?
  description     String?
  version_date    DateTime?
  version_no      Int?
  version_user    String?

  @@id([instr_ref, seq_no])
}

model instr_classification {
  instr_ref    String
  class_type   String
  class_code   String?
  user_def     String?
  description  String?
  version_date DateTime?
  version_no   Int?
  version_user String?

  @@id([instr_ref, class_type])
}

model instr_date {
  instr_ref    String
  date_type    String
  date         DateTime?
  user_def     String?
  description  String?
  version_date DateTime?
  version_no   Int?
  version_user String?

  @@id([instr_ref, date_type])
}

model instr_ext_ref {
  instr_ref          String
  instr_ext_ref_type String
  instr_ext_ref      String?
  user_def           String?
  description        String?
  version_date       DateTime?
  version_no         Int?
  version_user       String?

  @@id([instr_ref, instr_ext_ref_type])
}

model instr_flag {
  instr_ref    String
  flag_type    Int
  flag_code    String
  user_def     String?
  description  String?
  version_date DateTime?
  version_no   Int?
  version_user String?

  @@id([instr_ref, flag_type, flag_code])
}

model instr_narrative {
  instr_ref    String
  narr_type    String
  narrative    String?
  user_def     String?
  description  String?
  version_date DateTime?
  version_no   Int?
  version_user String?

  @@id([instr_ref, narr_type])
}

model kanbantask {
  id        String  @id
  title     String?
  status    String?
  summary   String?
  type      String?
  priority  String?
  tags      String?
  estimate  Int?
  assignee  String?
  rankid    Int?
  color     String?
  classname String?
}

model kb_priority {
  priority  String    @id
  updatedte DateTime?
  updateusr String?
}

model kb_status {
  status    String    @id
  updatedte DateTime?
  updateusr String?
}

model kb_type {
  type      String    @id
  updatedte DateTime?
  updateusr String?
}

model party {
  party_ref             String    @id
  party_type            String?
  party_short_name      String?
  party_long_name       String?
  party_extra_long_name String?
  active_ind            String?
  version_date          DateTime?
  version_no            Int?
  version_user          String?
}

model party_addr {
  party_ref     String
  addr_type     String
  contact_name  String
  contact_title String
  addr_line1    String
  addr_line2    String
  addr_line3    String
  addr_line4    String
  addr_line5    String
  addr_line6    String
  post_code     String
  int_dial_code String
  phone_no      String
  fax_no        String
  email         String
  version_date  DateTime?
  version_no    Int
  version_user  String

  @@id([party_ref, addr_type])
}

model party_assoc {
  party_ref       String
  assoc_type      String
  assoc_party_ref String?
  user_def        String?
  description     String?
  version_date    DateTime?
  version_no      Int?
  version_user    String?

  @@id([party_ref, assoc_type])
}

model party_audit {
  party_ref                 String
  party_data                String?
  party_ext_ref_data        String?
  party_classification_data String?
  party_flag_data           String?
  party_narrative_data      String?
  party_assoc_data          String?
  party_instr_data          String?
  party_ssi_data            String?
  party_date_data           String?
  party_address_data        String?
  party_template_data       String?
  party_class_assoc_data    String?
  version_date              DateTime?
  version_no                Int
  version_user              String?

  @@id([party_ref, version_no])
}

model party_classification {
  party_ref    String
  class_type   String
  class_code   String?
  user_def     String?
  description  String?
  version_date DateTime?
  version_no   Int?
  version_user String?

  @@id([party_ref, class_type])
}

model party_date {
  party_ref    String
  date_type    String
  date         String
  time         String
  version_date DateTime
  version_no   Int
  version_user String

  @@id([party_ref, date_type])
}

model party_ext_ref {
  party_ref          String
  party_ext_ref_type String
  party_ext_ref      String?
  user_def           String?
  description        String?
  version_date       DateTime?
  version_no         Int?
  version_user       String?

  @@id([party_ref, party_ext_ref_type])
}

model party_flag {
  party_ref    String
  flag_type    Int
  flag_code    String
  user_def     String?
  description  String?
  version_date DateTime? @default(now())
  version_no   Int?
  version_user String?

  @@id([party_ref, flag_type, flag_code])
}

model party_instr {
  party_ref      String
  instr_type     String
  instr_ref_type String?
  instr_ref      String?
  user_def       String?
  description    String?
  version_date   DateTime?
  version_no     Int?
  version_user   String?

  @@id([party_ref, instr_type])
}

model party_narrative {
  party_ref    String
  narr_type    String
  narrative    String?
  user_def     String?
  description  String?
  version_date DateTime? @default(now())
  version_no   Int?      @default(1)
  /// The value of this field is generated by the database as: `USER`.
  version_user String?   @default(dbgenerated())

  @@id([party_ref, narr_type])
}

model party_ssi {
  party_ref     String
  depot_alias   String
  depot_descr   String?
  depot_type    String?
  comms_service String?
  dacc_ref      String?
  account_no    String?
  account_name  String?
  depo_ref      String?
  active_ind    String?
  user_def      String?
  description   String?
  version_date  DateTime?
  version_no    Int?
  version_user  String?

  @@id([party_ref, depot_alias])
}

model party_swift_router {
  party_ref       String   @id
  company_name    String
  logical_term_id String[]
  queue_mgr       String
  incoming_queue  String
  outgoing_queue  String
  channel         String
  host            String
  port_number     Int
  version_date    DateTime
  version_no      Int
  version_user    String
  branch_code     String?
}

model party_template {
  party_ref          String    @id
  template_party_ref String
  party_short_name   String
  party_long_name    String
  version_date       DateTime?
  version_no         Int?
  version_user       String?
}

model gloss_scheduler{
   msg_type             Int
   event_ref            String
   database_type        String?
   database_code        String
   sql_db_code          String?
   bus_day              String?
   holiday_id           String?
   frequency_unit       String?
   frequency_interval   Int?
   frequency_start_time DateTime?
   frequency_end_time   DateTime?
   due_date_time        DateTime
   start_by_unit        String?
   start_by_interval    Int?
   end_by_interval      Int?
   use_current_date     String?
   active_ind_p2k       String?
   start_by_time        DateTime?
   end_by_time          DateTime?
   batch_size           Int?
   supercede            String?
   dst_region_code      String?
   version_no           Int?
   version_date         DateTime?
   version_user         String?
     @@id([msg_type, event_ref, due_date_time, database_code])
}

enum Role {
  ADMIN
  TEAMOPERATOR
  TEAMSUPERVISOR
}
